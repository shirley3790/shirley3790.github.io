<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript超神之旅day3-程序结构]]></title>
    <url>%2F2019%2F10%2F22%2Fjavascript3%2F</url>
    <content type="text"><![CDATA[程序的三大流程控制2 回顾：昨天，我们已经掌握了程序的几种流程控制，分别是顺序、分支、循环；今天我们继续加强对循环的理解，多写案例，巩固知识点。 循环分类：while、do while、for（循环三要素缺一不可） 循环跳转 break：//退出当前整个循环 循环体中位于break后的语句不会被执行 在多层循环嵌套中，一个break语句只向外跳一层 continue：//跳过本次循环，继续下一次循环 只能在循环语句中使用， 跳过本次循环（即跳过循环体中下面尚未执行的代码），接着执行下次循环。 label：给循环代码添加标识 break和continue后如果带标识，则跳到标识所在循环 PS： - 固定次数的循环，用for循环，不固定次数用while循环 - 死循环 死循环就是重复执行代码, 不会停止. 死循环会造成程序卡死甚至崩溃等问题, 所以我们写代码要避免死循环 12345678910111213/* break : 退出当前整个循环 continue :跳出这次循环，进入下一次循环 label ：给循环起名字 */ for(var i = 0; i &lt; 10; i++) &#123;//i=0 i&lt;n总共就n次循环;i=1 i&lt;=n,总共n次循环 if(i == 5) &#123; // break;//退出当前整个循环 0-4 continue;//?0-4 跳出这次循环，进入下一次循环 &#125; document.write(&apos;打印次数：&apos; + i + &apos;&lt;/br&gt;&apos;);//? &#125; 案例：打印2月份除2和12号中的天数循环的嵌套 循环的嵌套就是循环里面还有循环，初学者写嵌套的时候可以用代入法理解程序 1234567//循环的嵌套:for里面有for for(var i = 0; i &lt; 3; i++) &#123; for(var j = 0; j &lt; 4; j ++) &#123; document.write(&apos;打印：&apos; + i + j + &quot;&lt;/br&gt;&quot;);//? &#125; &#125; 两层循环遇到break循环次数会受影响吗？会打印什么？ 123456789//内循环遇到了break for(var i = 0; i &lt; 3; i++) &#123; for(var j = 0; j &lt; 4; j ++) &#123; if(j == 2) &#123; break;//跳出当前循环,推到上一级循环 &#125; document.write(&apos;打印：&apos; + i + j + &quot;&lt;/br&gt;&quot;);//? &#125; &#125; 案例：打印100以内的奇数1234567for(var i = 1; i &lt;= 100; i++) &#123; //该循环是100次循环，能够生成1-100之间的数字 if(i % 2) &#123; //余数是1就是奇数 document.write(&apos;奇数是：&apos; + i + &apos;&lt;/br&gt;&apos;); &#125; &#125;]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript超神之旅day2-程序结构]]></title>
    <url>%2F2019%2F09%2F29%2Fjavascript2%2F</url>
    <content type="text"><![CDATA[程序的三大流程控制 我们的计算机在执行一个程序的时候，最基本的方式是一条语句接一条语句的执行。但不可能所有的问题都能用顺序执行方式就能解决，总会有一些跳转。采用结构化的程序设计，可以大大提高开发程序的速度、提高程序的可读性、程序运行的速度和效率 顺序：从上朝下执行的代码就是顺序 分支(选择)：根据不同的情况，执行对应代码 循环：重复做一件事情 程序流程-顺序（代码从上到下执行） 代码默认就是从上到下执行，所以前面的代码出错（有bug）后面的就不能再继续运行，利用这个我们可以检测代码出错的地方，方便修改bug，结合控制台打印到页面： 123456789101112/* 07检测代码 * 控制台：console.log() 边做边检查 * 断点 */ //代码块1 console.log(&apos;111&apos;);//打印出来了，说明什么？证明上面的代码没有问题 //代码块2 console.log(222);//能打印出来，说明什么？问题出在代码块3这里 //代码块3 console.log(333);//没有打印出来：说明什么?说明上面代码有问题 程序流程-分支-if语句 if语句可以实现单分支、双分支、多分支 单分支 123if(条件)&#123; //条件成立(返回true)时，执行这里的代码，否则不执行&#125; 双分支：当if括号内的表达式结果成立，执行执行代码1，否则执行执行代码2 1234567if(条件)&#123; //代码1 //条件成立(返回true)时，执行这里的代码，忽略以下代码 &#125;else&#123; //代码2 //条件不成立(返回false)时，执行这里的代码 &#125; 案例：判断一个数是偶数还是奇数，并输出判断结果； 多分支：从上往下，满足哪个条件就执行其相对应的语句，都不满足时，执行最后的else的语句 123456789if(条件1)&#123; //条件1成立(返回true)时，执行这里的代码，忽略以下代码&#125;else if(条件2)&#123; //条件2成立(返回true)时，执行这里的代码，忽略以下代码&#125;...else&#123; //以上条件都不成立(都返回false)时，执行这里的代码&#125; 案例：if语句的使用123456789101112131415161718192021222324252627//单分支：临界值判断 var price = 49; if(price &lt; 50) &#123; console.log(&apos;符合我的需求，买买买！&apos;); document.write(&apos;符合我的需求，买买买！&apos;); &#125; //双分支：if else var gender = &apos;男&apos;; if(gender == &apos;女&apos;) &#123; document.write(&apos;&lt;br&gt;可以免费游玩乐满地一天！&apos;); &#125;else &#123; document.write(&apos;&lt;br&gt;你还是买票吧！&apos;); &#125; //多分支：判断成绩 //要有一个if；后面紧跟若干个else if；最后的else可以不写;条件表达式一定是写在if后的圆括号里面 var score = 78; if(score &gt;= 0 &amp;&amp; score &lt; 60) &#123; document.write(&apos;&lt;br&gt;你留级吧&apos;); &#125;else if(score &gt;= 60 &amp;&amp; score &lt; 80) &#123; document.write(&apos;&lt;br&gt;成绩良好，继续加油哦！&apos;); &#125;else if(score &gt;= 80 &amp;&amp; score &lt;= 100)&#123; document.write(&apos;&lt;br&gt;你真秀！&apos;); &#125;else &#123; document.write(&apos;&lt;br&gt;请输入100以内分数&apos;); &#125; 程序流程-分支-三元运算符（三目运算符） 格式：条件 ? 条件成立代码 : 条件不成立代码 123var a=20;var b = 50;var sum = a&gt;b ? a-b : a+b; 案例：求两个数的最大数程序流程-分支-switch语句12345678910111213141516switch(值) &#123; case value1: //要求value1与值恒等 //如果表达式的值恒等于value1，代码从这里开始执行 break; case value2: //如果表达式的值恒等于value2，代码从这里开始执行 break; case value3: //如果表达式的值恒等于value3，代码从这里开始执行 break; case value4: //如果表达式的值恒等于value4，代码从这里开始执行 break; default: //如果以上条件都不成立，默认执行这里的代码&#125; switch语句在比较值时使用的是全等操作符，因此不会发生类型转换 case: 当符合条件时，会从符合条件的那一条case语句开始，依次顺序向下执行，直到结束或遇到break break: 跳出switch语句 default: 当所有的case都不满足的情况下会执行defalut下面的语句 案例：今天星期几？1234567891011121314151617181920212223242526272829303132333435363738//利用switch判断今天星期几 //日期对象 var date = new Date();//获取完整的时间戳 var year = date.getFullYear();//年 var month = date.getMonth() + 1;//月 月份是从0开始的 var day = date.getDate();//日 var hours = date.getHours();//时 var mins = date.getMinutes();//分 var secs = date.getSeconds();//秒 var week = date.getDay();//星期几 从0开始：星期天 0-6 console.log(year, month, day, hours, mins, secs, week); //判断今天星期几 switch (week) &#123; case 0: document.write(&apos;今天星期天&apos;); break; case 1: document.write(&apos;今天星期一&apos;); break; case 2: document.write(&apos;今天星期二&apos;); break; case 3: document.write(&apos;今天星期三&apos;); break; case 4: document.write(&apos;今天星期四&apos;); break; case 5: document.write(&apos;今天星期五&apos;); break; case 6: document.write(&apos;今天星期六&apos;); break; &#125; 案例：用switch进行成绩判断12345678910111213141516//成绩的判断 var score = 88; switch (true) &#123; case score &gt;= 0 &amp;&amp; score &lt; 60: document.write(&apos;你需要留级啦！&apos;); break; case score &gt;= 60 &amp;&amp; score &lt; 80: document.write(&apos;你的成绩良好&apos;); break; case score &gt;= 80 &amp;&amp; score &lt;= 100: document.write(&apos;你好秀哦，秀儿&apos;); break; default : document.write(&apos;不是分数的范围&apos;); break; &#125; 程序流程-循环-while循环 循环就是重复做一件事, 在JS中指的是循环执行某部分代码. 循环结构是程序中一种很重要的结构，其特点是在给定条件成立时，反复执行某程序段，直到条件不成立为止 只要条件成立，就会不断地执行花括号里的语句 编写条件时，要避免出现死循环 12345//变量初始化while(条件)&#123; //条件成立就会不断地执行这里的代码，直到条件不成立 //所以这里一般会伴随着条件的更新&#125; 循环三要素：初始值、判断值、自增值（自减值） 案例：为什么要循环，隔行变色的实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/* 隔行变色 知识点： * 获取集合的长度：集合.length * lis[0] :下标从0开始 * 怎么添加属性和值： 节点.属性名 = 属性值； */ var list = document.getElementById(&apos;list&apos;);//单个 var lis = list.getElementsByTagName(&apos;li&apos;);//集合,通过下标的方式获取到某一个节点 console.log(lis.length);//集合的长度 5 console.log(lis[0].innerHTML);//找到第一个li并把里面的值打印出来 //添加属性的方法 // lis[0].title = &apos;第一个节点&apos;;//添加title值 // lis[0].style = &apos;width:200px;height:200px;&apos;;//添加行内样式：方式一 // lis[0].style.background = &apos;red&apos;;//添加具体的行内样式:方式二，常用 // console.log(lis[0].title);//获取title值 //隔行变色 // lis[0].style.background = &apos;#58bc58&apos;; // lis[1].style.background = &apos;pink&apos;; // lis[2].style.background = &apos;#58bc58&apos;; // lis[3].style.background = &apos;pink&apos;; // lis[4].style.background = &apos;#58bc58&apos;; /* 循环结构： * while * 三个值缺一不可:初始值、判断值、自增值，合理的使用三个值，就可以构成循环，但是要避免死循环 * 执行路线： 1.初始值 2.判断while的表达式是否符合条件，如果符合条件就跳到第3步;如果不符合条件跳到第4步 3.执行花括号里面的语句块，自增,返回第2步 4.循环后面的语句块 * do while * for */ var i = 0;//初始值 while(i &lt; 8) &#123;//i &lt; 8 判断值 document.write(&apos;&lt;br&gt;&apos; + i);//0-7 i++;//自增值 &#125; console.log(&apos;i&apos; + i);//8 //隔行变色 var j = 0;//初始值 while(j &lt; lis.length) &#123;//判断值 if(j % 2 == 0) &#123; lis[j].style.background = &apos;#58bc58&apos;; &#125;else &#123; lis[j].style.background = &apos;pink&apos;; &#125; j++;//自增值 &#125; console.log(j);//?lis.length 案例：和尚挑水山上有一口缸可以装50升水，现在有15升水。老和尚叫小和尚下山挑水，每次可以挑5升。问：小和尚要挑几次水才可以把水缸挑满？通过编程解决这个问题。 123456789101112131415/* 山上有一口缸可以装50升水，现在有15升水。老和尚叫小和尚下山挑水，每次可以挑5升。问：小和尚要挑几次水才可以把水缸挑满？通过编程解决这个问题。 需求： * 已经条件：缸：50 目前：15，每次：5 * 求：多少次可以装满？ */ var water = 15;//目前15升水 var num = 0;//记录次数 while(water &lt; 50) &#123;//判断值 num++; water += 5;//自增值 &#125; console.log(&apos;需要挑水&apos; + num + &apos;次&apos;); 程序流程-循环-do while循环 do while循环特点：先执行后判断，所以至少会执行一次代码 12345/变量初始化do &#123; //不管条件是否成立，先执行一次这里的代码，再进行条件判断，如果条件依然成立，则再次执行这里的代码，依此类推 //所以这里一般会伴随着条件的更新&#125; while(条件) 程序流程-循环-for循环结构：注意两个分号都必须要写 123for(变量初始化; 条件判断; 变量更新)&#123; //循环条件成立，则执行这里的代码&#125; 举例： 12345678910111213141516171819//for循环(推荐写法) for(var j = 0; j &lt; 10; j++) &#123; document.write(&apos;今天心情非常好，星期四了哦！&apos; + j + &apos;&lt;/br&gt;&apos;);//0-9 &#125; console.log(&apos;j:&apos; + j);//j 10 //for的第二种写法 var k; for(k = 0; k &lt; 10; k++) &#123; document.write(&apos;今天心情非常好，星期四了哦！&apos; + k + &apos;&lt;/br&gt;&apos;);//0-9 &#125; console.log(&apos;k:&apos; + j);//j 10 //for的第三种写法 var m = 0; for(; m &lt; 10; m++) &#123; document.write(&apos;今天心情非常好，星期四了哦！&apos; + m + &apos;&lt;/br&gt;&apos;);//0-9 &#125; console.log(&apos;m:&apos; + m);//j 10 作业 1.输入月份，显示当月的天数 不考虑闰年 利用case穿透简化代码 2.测试身材是否标准： BMI指数（即身体质量指数，简称体质指数又称体重，英文为Body Mass Index，简称BMI），是用体重公斤数除以身高米数平方得出的数字，是目前国际上常用的衡量人体胖瘦程度以及是否健康的一个标准。主要用于统计用途，当我们需要比较及分析一个人的体重对于不同高度的人所带来的健康影响时，BMI值是一个中立而可靠的指标。 成人的BMI数值： 体质指数（BMI）= 体重（kg）÷身高^2（m） 如：70kg÷（1.75×1.75）=22.86 过轻：低于18.5 正常：18.5-24.99 过重：25-28 肥胖：28-32 非常肥胖, 高于32 3.输入成绩，进行成绩判定(要求用if和switch两种写法) 大于85 优秀 大于等于75小于等于85 良好 大于等于60小于75 及格 小于60 不及格]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript超神之旅day1-js基础了解]]></title>
    <url>%2F2019%2F08%2F28%2Fjavascript%2F</url>
    <content type="text"><![CDATA[JavaScript的诞生 ​ javaScript 诞生于 1995 年。由Netscape(网景公司)的程序员Brendan Eich(布兰登)与Sun公司联手开发一门脚本语言, 最初名字叫做Mocha，1995年9月改为LiveScript。12月，Netscape公司与Sun公司（Java语言的发明者）达成协议，后者允许将这种语言叫做JavaScript。这样一来，Netscape公司可以借助Java语言的声势（趁热度）。 ​ 1996年3月， Netscape公司的浏览器Navigator2.0浏览器正式内置了JavaScript脚本语言. 此后其他主流浏览器逐渐开始支持JavaScript。能够实现网页特效和数据交互。 ​ 那什么是脚本？脚本的意思就是这门语言不能独立运行，需要嵌入到其他语言才能执行，js需要嵌入在html里面才能运行产生效果。 js的作用 用户交互 表单验证 网页特效 用途：使用它的主要目的是，验证发往服务器端的数据、增加 Web互动、加强用户体验度等。可用于开发网站、游戏、移动端app等 。 js版本 JavaScript这种语言的基本语法结构是由ECMAScript来标准化的, 所以我们说的JavaScript版本一般指的是ECMAScript版本. 1997年7月，ECMAScript 1.0发布。 1998年6月，ECMAScript 2.0版发布。 1999年12月，ECMAScript 3.0版发布。 2007年10月，ECMAScript 4.0版草案想要提交ECMA组织, 但由于4.0版的目标过于激进, 改动太大, 并且微软,谷歌等大公司极力反对；一直到2008年7月ECMA开会决定，中止ECMAScript 4.0的开发（即废除了这个版本） 2009年12月，ECMAScript 5.0版正式发布 2011年6月，ECMAscript 5.1版发布 2015年6月，ECMAScript 6正式发布，并且更名为“ECMAScript 2015”。 js优势 目前苹果公司的Safari, 谷歌的Chrome,微软的IE等几乎全部浏览器都支持JavaScript, 基于JavaScript开发的库和框架数不胜数, 例如: jQuery,Angular, React等… JavaScript将在前端和服务器端(Node.js)有更好的发展。 js组成 javascript = ECMAScript + BOM + DOM 核心(ECMAScript)：标准、规则 浏览器对象模型(BOM) ：js赋予我们操控窗口的能力，比如：弹窗、复制、粘贴、历史管理、刷新页面…… 文档对象模型(DOM)：节点的增删改查、属性的设置和获取…… JS和H5的关系 h5全称html5,不是单纯的html的第5个版本，而是一项最新的web标准，是html、css、javascript等技术的集合；你也可以称之为“大前端”，就是前端后端都要会，但是偏向于前端。 全栈：精通前端+后端技术。 js代码的编写位置 script标签 123&lt;script type=&quot;text/javascript&quot;&gt; alert(&apos;你好&apos;)&lt;/script&gt; js文件 ：独立的js文件需要引入页面才能执行 （js是脚本语言） 1&lt;script type=&quot;text/javascript&quot; src=&quot;js/common.js&quot;&gt;&lt;script&gt; script标签属性 type:类型 src :js文件路径带src属性的script标签内不能写js代码 案例：js的引入12345678910111213141516171819&lt;script src=&quot;js.js&quot;&gt; /* 知识点： * js引入的方式两种： - 通过src属性引入js文件 - 写在页面内 * 注意事项：如果已经写了src属性，在里面写的js代码就无效 * js的组成： * ECMAScript：标准，语法规定 我：01011101，编译器 * DOM：文档对象模型，节点的操作，查找、删除、创建、复制、插入节点，js赋予我们操控节点的能力 * BOM:浏览器对象模型。复制、粘贴，js赋予我们操控窗口的能力 * h5：大前端，前后端都需要会，精通前端，html、css、js、部分后端技术：php、nodejs */ // alert(&apos;999&apos;);写在这里的代码无效，因为已经引入了js文件 &lt;/script&gt;&lt;script&gt; //推荐把js放到末尾，不然js过大，放在前面，会造成页面空白，用户体验不好 alert(&apos;我的第一个js&apos;);&lt;/script&gt; 变量的定义 变量定义(使用var关键字)：变量是存储数据的容器var age; //var 是关键字，age是变量名，这句话叫做声明变量，也可以叫定义了一个变量 赋值：age = 20;//这个写法是没有写var的，但是也可以定义一个变量，并且马上赋值，=在计算机里面叫做赋值符号，就是把右边的内容放到左边的容器里面。虽然不写var也可以定义变量，但是不推荐这样写，因为不写var的时候实际上这个变量就变成了全局变量（后面讲到作用域的时候会说明为什么不好）。 定义的同时赋值：（推荐写法：声明就马上赋值）var age=20; 可以一次定义多个变量：var name=&quot;薛之谦&quot;, age=18, weight=108; JS代码规范 JS变量的命名规范 变量名必须是数字,字母,下划线_和美元符$组成; 第一个字符不能为数字 不能使用关键字或保留字 关键字：这些单词在计算机中有特殊的含义，就不能用这些单词来作为变量名、参数名和函数名。 保留字：有些单词，在js中准备用于扩展使用，备用单词也不允许作为变量名、参数名和函数名。 break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if try delete throw in class extends const let export import 关键字保留字参考：https://www.runoob.com/js/js-reserved.html 代码可读性 标识符区分大小写，如：age和Age是不同的变量。但强烈不建议用同一个单词的大小写区分两个变量。 变量命名尽量遵守驼峰原则: myStudentScore（第二个单词开始首字母大写） 变量命名尽量见名知意（建议下载有道，查单词） 保持代码缩进（遇到花括号要换行缩进） JS语句的末尾尽量写上分号;（其实不写没错，但是建议写，增加代码可读性） 运算符两边都留一个空格, 如 var n = 1 + 2;（细节要注意） 注释 单行注释：//注释内容 多行注释（和CSS注释一样）： /*注释内容*/多行注释里面不能嵌套 案例：代码规范12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;script&gt; /* js是世界上最灵活的语言：不严谨 变量的定义： * 变量名必须是数字,字母,下划线_和美元符$组成; * 第一个字符不能为数字 * 不能使用关键字或保留字 */ var num = 666;//var 关键字，意思定义一个变量，num就是变量名，把右边的内容存到左边的变量里面 num = &apos;韭菜一汤&apos;;//一个变量只能存一个值，如果再存值，会被覆盖 var str1 = str2 = &apos;婧婧&apos;; // alert(num);//?拿到的是最新的num的值，建议不要alert检测代码，会阻塞后面代码的运行 var box = document.getElementById(&apos;box&apos;);//通过id查找节点 box.innerHTML = &apos;我喜欢旅游&apos;;//设置内容 var divLogin; var fruits; //打印到控制台 console.log(num, str1, str2);//? var a = 6; var b = 7; var c = a * b; console.log(c);//? //建议声明马上就赋值 var age = 0;//如果不确定这个值，先初始化给个默认值，防止undefined console.log(age);//undefined 声明未赋值就会报这个错误 age = 18;//覆盖 /* 变量的规范 $this 合法 _this 合法 var 不合法，关键字 class 不合法,关键字 6str 不合法，数字开头 -num%ss 不合法，出现特殊符号 for 不合法，关键字 */ var studentInf;//学员信息 var username; var psw; /* 符号： 数学 程序 &lt;&gt; 大于号小于号 尖括号 [] 中括号 方括号 &#123;&#125; 大括号 花括号 () 小括号 圆括号 遇到花括号就要换行缩进 */ //函数 function show() &#123; console.log(123); console.log(123); console.log(123); console.log(123); console.log(123); &#125; show();//加分号&lt;/script&gt; JS数据类型 基本数据类型 Number：数字 NaN：是一个特殊的值，即非数值(Not a Number)。数学运算无法得到数字时，就会返回NaN 不代表任何值，也不等于任何值，甚至自己都不等于自己 任何数据与它运算都返回NaN isNaN(a)：用来判断a到底是不是非数字,返回布尔值 Boolean: 布尔类型Boolean 类型有两个值：true和false String：字符串 用引号（单/双引号）括起来的内容 特殊数据类型 NullNull 类型是一个只有一个值的数据类型，即特殊的值 null。它表示一个空对象引用(指针)，而 typeof 操作符检测 null 会返回 object Undefined Undefined类型只有一个值，即特殊的 undefined，在使用 var 声明变量，但没有对其初始化时，这个变量的值就是 undefined 与not defined的区别(not defined:未声明) 引用数据类型 Array：数组 Object：对象 数据类型判断 ：typeof 1234typeof &apos;html5&apos;; //=&gt;stringtypeof 100; //=&gt;numbertypeof true //=&gt;booleantypeof null //=&gt;object 数据类型转换 隐式类型转换 ：如果运算不能进行下去，内部就会尝试进行数据类型的转换 支持隐式转换的运算：逻辑运算、关系运算、算术运算 强制类型转换：利用内置函数进行转换 值(a) 转换为 字符串String(a) 数字Number(a) 布尔值Boolean(a) undefined =&gt; “undefined” NaN false null =&gt; “null” 0 false true =&gt; “true” 1 false =&gt; “false” 0 “” =&gt; 0 false “1.2” =&gt; 1.2 true “one” =&gt; NaN true 0 =&gt; “0” false -0 =&gt; “0” false NaN =&gt; “NaN” false 1 =&gt; “1” true 案例：隐式类型转换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;script&gt; /* 数据类型： * 基本数据类型： * 值类型：string/number/boolean * 特殊类型：null/undefined * 复合数据类型(引用类型):array数组、对象 object&#123;&#125; * 检测数据类型：typeof(数据)，返回数据类型 */ //值类型 var str = &apos;鸡你太美&apos;;//可以单引号可以双引号，有引号装起来的就是字符串类型 console.log(str); console.log(typeof(str));//string var num = 88; console.log(num); console.log(typeof(num));//nubmer //数学运算无法运行的时候，就是显示NaN var n1 = 12; var n2 = &apos;10&apos;; var n3 = n1 + n2; console.log(n3);//1210 ? +在程序里面有两个功能，如果两边都是数字，就是纯粹的数学运算相加；如果其中一边是字符串，就是字符串拼接(得到一个字符串) var m1 = 12; var m2 = &apos;10&apos;; var m3 = m1 - m2;//隐式类型转换：系统帮你偷偷的转换了数据类型再相减 console.log(m3);//2 var k1 = 12; var k2 = &apos;good&apos;; var k3 = k1 - k2; console.log(k3);//NaN console.log(&apos;数据类型是&apos; + typeof(k3)); var isok = true;//布尔值 真 console.log(typeof(isok));//boolean console.log(NaN == NaN);//false //isNaN() 这不是一个数字，返回true：这不是数字； false：真是数字 console.log(&apos;k3是数字吗?&apos; + isNaN(k3)); console.log(&apos;k2是数字吗?&apos; + isNaN(k2)); //特殊类型 var price; console.log(price);//price is not defined 还没有定义这个变量;undefined 声明未赋值 //验证null var usn = document.getElementById(&apos;usn&apos;); if(usn.value) &#123; //非空验证-正则验证-ajax传给后端 console.log(&apos;非空&apos;); &#125;else&#123; //空 console.log(&apos;空&apos;); &#125;&lt;/script&gt;基本数据类型转换：利用内置函数进行转换 案例:强制类型转换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;script&gt; /* 04数据类型的转换: * 强制类型转换：系统提供一些方法，让你强制的把某个数据类型转成另外一种 * String(要转的数据) ：得到字符串(重点) * Number(要转的数据) ： 得到的数字(重点) * Boolean(要转的数据) :得到布尔值 * parseInt() : 把字符串转成数字类型，整型，整数(重点) * parseFloat() :把字符串转成数字类型,但是可以保留小数部分，float 浮点数，小数 * 隐式类型转换：系统会自动帮你转换数据类型，转不了就返回NaN */ var num = 123; var str = String(num);//数字转成字符串 console.log(num,str);//? //字符串转成数字 var price = &apos;88&apos;; var priceNum = Number(price); console.log(priceNum); var box = document.getElementById(&apos;box&apos;); var ele = null; //什么是真和假？ //真：true、非零数字、表达式为真的、非空字符串、非空对象 box //假：false、数字0、表达式为假的、空字符串、空对象 ele、undefined // 5&gt;3 // if(表达式) &#123;//在if语句后面的条件表达式里面，会自动的转换成布尔值 // //返回真，执行这里的代码 // &#125;else&#123; // //返回假：执行这里的代码 // &#125; //parseInt() var all = &apos;999&apos;; var newAll = parseInt(all);//1.把字符串转成数字类型 console.log(all,newAll); var n1 = &apos;32num&apos;; var n2 = parseInt(n1);//2.提前字符串中数字开头的数字部分，并转成数字 console.log(n1,n2); var n3 = 67.8; var n4 = parseInt(n3);//3.取整 console.log(n3,n4); //隐式类型转换:- * / % == var n1 = 4; var n2 = &apos;4&apos;; console.log(n1 + n2);//24,+ 不会进行隐式转换 console.log(n1 - n2); console.log(n1 * n2); console.log(n1 == n2);//?true == 进行隐式转换,等于 console.log(n1 === n2);//false 恒等，全等,不能隐式转换，直接比较 //需求：把字符串转成数字 var num = &apos;90&apos;; console.log(Number(num)); console.log(num - 0); console.log(num * 1); console.log(num / 1); console.log(parseInt(num)); console.log(parseFloat(num));&lt;/script&gt; ##### 运算符–算数运算符 +, -, *, /, %:加,减,乘,除,取余(取模) +号用途一：当加号两边都是数字类型的时候，实现数学运算相加 +号用途二：只要加号一边是字符串的时候，实现的是字符串的拼接 案例：算数运算符的运用12345678910111213141516171819&lt;script&gt; /* 运算符： * 算术运算符：+ - * / %(取余，求模) * 逻辑运算符：&amp;&amp; 与 、|| 或 、! 非 * 比较运算符：&lt; &gt; &gt;= &lt;= == === != !==,经过比较运算符后得到的是真和假 * 三目运算符：明天再见 ?: * 赋值运算符：= += -= *= /= %= * 一元运算符:-- ++ 自增、自减 i++ ++i */ //算术运算符: + 可以做加法运算；可以拼接字符串 var n1 = 88; var n2 = &apos;90&apos;; var n3 = n1 + n2;//8890 //取余： % var num = 9 % 2; console.log(num);//余数 1&lt;/script&gt; 案例：战士作战1234567891011121314151617181920&lt;script&gt; /* 为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？ 需求：给你89小时=转成 xx天xx小时 */ var hours = 89; var day = parseInt(hours / 24);//天数 var hour = hours % 24; console.log(day,hour); console.log(&apos;89小时：&apos; + day + &apos;天&apos; + hour + &apos;小时&apos;); //秒：789秒：xx分xx秒 var secs = 789; var mins = parseInt(secs / 60);//分 var sec = secs % 60; console.log(mins,sec); &lt;/script&gt; 案例：一个引号引发的公司倒闭12345678910111213141516171819202122232425/* 一个引号引发的公司倒闭 知识点：打印数据 * 弹窗类：都会阻塞代码的执行，所以要少用 * alert() 弹窗 * confirm() 能够确定和取消 * prompt() 接收前端的数据 * document.write(all); 打印内容到页面 * 打印到控制台：console.log() */ var jingjing = &apos;20000&apos;; var laoxie = &apos;1999&apos;; var linjie = 2999; var laoyao = 999; var yongge = &apos;3999&apos;; var all = jingjing + laoxie + linjie + laoyao + yongge;//拼接功能 console.log(all); document.write(all); var res = confirm(&apos;你帅吗？&apos;); console.log(res); var con = prompt(&apos;你今年多大？&apos;); console.log(con); 运算符–逻辑运算符（返回布尔值） &amp;&amp;: 逻辑与 （这里注意：与的优先级比或要高） 特性一：两边为真才为真 特性二：左边为假，不再运行右侧 ||：逻辑或 特性一：两边为假才为假 特性二：左边为真，不再运行右侧 !: 逻辑非 （取反，用于做开关） 12!true //=&gt; false!false //=&gt; true 案例：逻辑运算符和判断语句的使用1234567891011121314151617181920212223242526272829//逻辑运算符：&amp;&amp; 与 、|| 或 、! 非//与：两边都为真才为真；或：只要有真则真；!非，取反//桂林：乐满地,3.7女生节，女生穿短裙免费var gender = &apos;男&apos;;var cloth = &apos;短裙&apos;;//判断语句if(gender == &apos;女&apos; || cloth == &apos;短裙&apos;) &#123; //满足条件：女生穿短裙 console.log(&apos;恭喜你可以免费游玩乐满地！&apos;);&#125;else &#123; console.log(&apos;对不起,你还是买票吧！&apos;);&#125;// if(gender == &apos;女&apos;) &#123;// //女生// if(cloth == &apos;短裙&apos;) &#123;// //女生，短裙// console.log(&apos;恭喜你可以免费游玩乐满地！&apos;);// &#125;else &#123;// console.log(&apos;请换短裙吧！&apos;);// &#125;// &#125;else &#123;// //非女生// console.log(&apos;你还是去买票吧！&apos;);//poy// &#125; 案例：非！（取反）的应用-下拉菜单的实现html结构和样式：按钮和一个盒子，盒子先隐藏，一会点击一次就出现，再点击又隐藏，来回切换 12345678910111213&lt;style&gt; #box&#123; width: 200px; height: 200px; background: red; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;下拉菜单&quot; id=&quot;btn&quot;&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt; js代码实现：开关的应用 12345678910111213141516171819202122232425262728293031323334&lt;script&gt; /* 怎么让一个盒子隐藏： * display :none; * height:0 * width:0 * opacity:0 * div遮罩 * left * top */ /* 需求：实现一个下拉菜单效果，点击就出现，再点击又隐藏 * 找到两个节点:btn box * 给btn绑定点击事件，功能就是控制box的显示和隐藏 */ var btn = document.getElementById(&apos;btn&apos;); var box = document.getElementById(&apos;box&apos;); var isok = true;//开关 //绑定事件: 节点.事件名 = function() &#123; 功能 &#125; btn.onclick = function() &#123;//函数 // alert(123); //节点名.style.属性名 = 属性值 if(isok) &#123;//true box.style.display = &apos;block&apos;; &#125;else&#123; box.style.display = &apos;none&apos;; &#125; isok = !isok; &#125;&lt;/script&gt; 运算符–关系运算符（返回布尔值） ==(等于), !=(不等于) &lt;(小于)、&gt;(大于)、&lt;=(小于等于)、&gt;=(大于等于) ===、恒等于/全等于，比较的时候要求值和类型都相等（不会进行类型隐式转换） !==、不全等于 关系运算符的比较规则:\1. 数字和数字比较, 直接比较大小\2. 数字和字符串比较, 字符串转换为数字后再比较\3. 字符串和字符串比较, 进行字符的ASCII码值比较 12345678910111213/* 关系运算符的比较规则: 1. 数字和数字比较, 直接比较大小 2. 数字和字符串比较, 字符串转换为数字后再比较 3. 字符串和字符串比较, 进行字符的ASCII码值比较 */ var num1 = &apos;23&apos;; var num2 = 34; console.log(num1 &lt; num2); var str1 = 7; var str2 = &apos;b&apos;;//98 console.log(str1 &gt; str2); 运算符–赋值运算符 =var num1=10;//表示把10赋值给num1变量 +=：在原来的内容基础上追加内容str += &#39;test&#39; &lt;==&gt; str = str + &#39;test&#39; -=：var n=10; n -= 2 &lt;==&gt; n = n - 2 *=,/=,%= 赋值符号里面+=是用得比较多的，后期经常用于拼接字符串，比如我要得到下面结构的字符串： 12345678910&lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 我可以一段段的拼接出来： 123456789101112131415&lt;script&gt; //赋值运算符：= += -= *= /= %= var num = 7; // num = num + 8;可以换成下面的写法 num += 8; console.log(num);//15 //拼接数据：熟悉拼接，以后会经常用 var html = &apos;&lt;div&gt;&lt;ul&gt;&apos;; html += &apos;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&apos;; html += &apos;&lt;/ul&gt;&lt;/div&gt;&apos;; console.log(html);&lt;/script&gt; 运算符–一元运算符 ++: 自增1（在原来的数值基础上加1） –：自减1（在原来的数值基础上加1） 前置： 12var num = 10;++num;--num; 后置： 12var num = 10;num++;num-- 总结： 针对自身都会加一（减一）； 针对返回值： 前置：返回加（减）之后的值 后置：返回加（减）之前的值 12345678910111213141516171819202122232425//一元运算符 var num = 2; // num = num + 1; // num += 1; var r1 = num++; console.log(num);//3 自身会加一 console.log(r1);//2 后置返回值是返回加之前的值，还是2 /* ++: 自增1（在原来的数值基础上加1） --：自减1（在原来的数值基础上加1） 前置：++num 后置：num++ * 自身：都加1 * 返回值： 前置，返回加之后的值； 后置：返回加之前的值； */ var m = 1; var res = m++ + ++m + m + m-- + m + m++; // m = 2 3 3 2 2 3 自身 // res= 1 + 3 + 3 + 3 + 2 + 2 返回值 //m? res? console.log(m,res); 操作符优先级 运算符 描述 ., [], () 对象成员存取、数组下标、函数调用、分组等 ++, –, ~, !, delete, new, typeof, void 一元运算符 *, /, % 乘法、除法、取模 +, - 加法、减法、字符串连接 &lt;, &lt;=, &gt;, &gt;=, instanceof 关系比较、检测类实例 ==, !=, ===, !== 等于、恒等(全等) &amp;&amp; 逻辑与 ` ?: 三元运算条件 =, +=, -=, *=, /=, %= 赋值、运算赋值 作业 1.给你6789秒，你转成：xx时xx分xx秒； 2.小米首页切图布局：https://www.mi.com/,相同模块保留一个即可 3.给定一个三位数，分别把这个数字的百位、十位、个位算出来并显示。 4.判断输入框输入的年份是否为闰年 （能被4整除但不能被100整除，或者能被400整除的才叫闰年 ） 拓展： 1.计算商品价格 ：总价=数量*单价]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
